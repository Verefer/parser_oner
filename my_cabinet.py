from aiogram import types
from config import *
from states import *
from main_keyboards import *
import random
import asyncio
import string
from aiogram.dispatcher import FSMContext
from telethon import TelegramClient
import datetime


@dp.callback_query_handler(lambda c: c.data == 'my_cabinet', state='*')
async def view_my_cabinet_inline_handler(call: types.CallbackQuery):
    user = DB.get_user(call.from_user.id)
    balance = DB.get_balance_user(call.from_user.id)
    if datetime.datetime.now() > user[2]:
        subscription = '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    else:
        subscription = f'–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {user[2].day}-{user[2].month}-{user[2].year} {user[2].hour}:{user[2].minute}:{user[2].second}'
    text = f"""
üí≥ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance[1]}–†
üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {balance[3]}
‚ôªÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:
{subscription}   
"""
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton('üí∞–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='top_up_balance_view_methods'))
    kb.row(types.InlineKeyboardButton('üõç–ü–æ–¥–ø–∏—Å–∫–∞', callback_data='view_subscription'))
    kb.row(types.InlineKeyboardButton('üë´ –†–µ—Ñ–µ—Ä–∞–ª—ã', callback_data='view_referal_system'))
    kb.row(types.InlineKeyboardButton('üéÅ–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='enter_promocode'))
    kb.row(types.InlineKeyboardButton('‚öôÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤', callback_data='clear_tokens'))
    await bot.send_message(call.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'enter_promocode', state='*')
async def enter_promocode_inline_handler(call: types.CallbackQuery):
    await MyCabinet.enter_promo.set()
    await bot.send_message(call.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.',
                           reply_markup=kb_return_to_main_keyboard_inline)


@dp.callback_query_handler(lambda c: c.data == 'clear_tokens', state='*')
async def clear_tokens_inline_handler(call: types.CallbackQuery):
    token = DB.get_token(call.from_user.id)
    while token is not None:
        DB.delete_token(token[0])
        token = DB.get_token(call.from_user.id)
    await call.answer('‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)


@dp.message_handler(state=MyCabinet.enter_promo)
async def enter_promo_handler(message: types.Message, state: FSMContext):
    await state.finish()
    promo_codes: tuple = DB.get_all_promo_codes()
    codes_list = list(map(lambda el: el[0], promo_codes))
    if message.text in codes_list:
        index = codes_list.index(message.text)
        DB.set_promo_code_and_discount(message.from_user.id, promo_codes[index][0], promo_codes[index][1])
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É {promo_codes[index][1]}% —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                             reply_markup=kb_return_to_main_menu)
    else:
        await message.answer('–ü—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@dp.callback_query_handler(lambda c: c.data == 'view_referal_system', state='*')
async def view_referal_system_inline_handler(call: types.CallbackQuery):
    length_referals = DB.get_amount_refers(call.from_user.id)
    text = f"""
üë´ –†–µ—Ñ–µ—Ä–∞–ª—ã

–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {length_referals}
–¢–≤–æ—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞: https://t.me/{BOT_USERNAME}?start={call.from_user.id}

‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {REFER_PERCENT}% –æ—Ç –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.
"""
    await bot.send_message(call.from_user.id, text, reply_markup=kb_return_to_main_keyboard_inline)


@dp.callback_query_handler(lambda c: c.data == 'view_subscription', state='*')
async def view_subscription_inline_handler(call: types.CallbackQuery):
    user = DB.get_balance_user(call.from_user.id)
    text = f"""
üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ OLX UA

üëâüèº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user[1]} RUB

‚Ä¢ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ. –ß–µ–º –±–æ–ª—å—à–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ.
‚Ä¢ –ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Å–∞–π—Ç, —Ç–æ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç —á–∞—Å–æ–≤.    
"""
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton('90 RUB | 1 –¥–µ–Ω—å', callback_data='buy_subscription&90&1'))
    kb.row(types.InlineKeyboardButton('250 RUB | 3 –¥–Ω—è', callback_data='buy_subscription&250&3'))
    kb.row(types.InlineKeyboardButton('500 RUB | 7 –¥–Ω–µ–π', callback_data='buy_subscription&500&7'))
    kb.row(types.InlineKeyboardButton('2000 RUB | 30 –¥–Ω–µ–π', callback_data='buy_subscription&2000&30'))
    kb.row(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu'))
    await bot.send_message(call.from_user.id, text, reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data.startswith('buy_subscription'), state='*')
async def buy_subscription_inline_handler(call: types.CallbackQuery):
    amount, days = call.data.split('&')[1:]
    balance = DB.get_balance_user(call.from_user.id)
    total_price = int(amount) * (100 - balance[3]) // 100
    if total_price > balance[1]:
        await call.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞', show_alert=True)
    else:
        user = DB.get_user(call.from_user.id)
        if datetime.datetime.now() >= user[2]:
            time_subscription = datetime.datetime.now() + datetime.timedelta(days=int(days))
        else:
            time_subscription = user[2] + datetime.timedelta(days=int(days))
        DB.update_user_balance(call.from_user.id, -int(total_price))
        DB.set_new_time_for_subscription(call.from_user.id, time_subscription)
        text = f"""
–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ OLX UA –Ω–∞ —Å—É–º–º—É {amount} RUB –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {days} –¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.
–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ {balance[3]}%
–°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {total_price}        
"""
        await bot.send_message(call.from_user.id, text, reply_markup=kb_return_to_main_menu)


@dp.callback_query_handler(lambda c: c.data == 'top_up_balance_view_methods', state='*')
async def top_up_balance_view_methods_inline_handler(call: types.CallbackQuery):
    kb = types.InlineKeyboardMarkup()
    kb.row(types.InlineKeyboardButton('ü§ñ BANKER', callback_data='top_up_balance_method_banker'))
    kb.row(types.InlineKeyboardButton('ü•ù QIWI', callback_data='top_up_balance_method_qiwi'))
    await bot.send_message(call.from_user.id, 'üí∞ –í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:', reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'top_up_balance_method_banker', state='*')
async def top_up_balance_method_banker_inline_handler(call: types.CallbackQuery):
    text = """
–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —á–µ–∫–∞:
1. –°–æ–∑–¥–∞–π—Ç–µ —á–µ–∫ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –≤ BTC
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞
3. –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚Ä¢ –ò–∑-–∑–∞ —Å–∫–∞—á–∫–æ–≤ –∫—É—Ä—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è
‚Ä¢ –ß–µ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫, –∞ –Ω–µ QR-–∫–æ–¥–æ–≤ –∏–ª–∏ —Ö—ç—à–µ–π    
"""
    await TopUpBalance.deposit_banker.set()
    await bot.send_message(call.from_user.id, text, reply_markup=kb_return_to_main_keyboard_inline)


@dp.message_handler(state=TopUpBalance.deposit_banker)
async def top_up_balance_handler_success(message: types.Message, state: FSMContext):
    try:
        if message.text.startswith('https://telegram.me/BTC_CHANGE_BOT?start='):
            check = '/start ' + message.text.split('=')[1]

            await run_process_send_check_banker(check, message.from_user.id)
            await bot.send_message(message.from_user.id, '–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.')
        else:
            await bot.send_message(message.from_user.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫.')
        await state.finish()
    except Exception as ex:
        print(ex)
        await bot.send_message(message.from_user.id, '–ü—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')


async def run_process_send_check_banker(check, user_id):
    async with TelegramClient('session', API_APP_ID, API_HASH) as client:
        await client.send_message('BTC_CHANGE_BOT', check)
        try:

            await asyncio.sleep(1)

            entity = await client.get_entity('BTC_CHANGE_BOT')
            message = await client.get_messages(entity, limit=2)

            fmes = message[0].message.split()

            if '–í—ã' not in fmes:
                message = message[1].message.split()
            else:
                message = fmes

            print(message)
            amount_btc = float(message[2])
            money = int(float(coinbase_client.get_spot_price(currency_pair='BTC-RUB')['amount']) * amount_btc)

            print(money)
            user = DB.get_user(user_id)
            DB.update_user_balance(user_id, money)
            await bot.send_message(ADMINS[0], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {money}RUB')
            if user[8]:
                percent = money * REFER_PERCENT // 100
                if percent > 1:
                    DB.update_user_balance(user[8], percent)
                    await bot.send_message(user[8], f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {percent} RUB –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ü§ù")
            await bot.send_message(user_id, f'–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {money} RUB', reply_markup=kb_return_to_main_menu)
        except Exception as ex:
            print(ex)
            await bot.send_message(user_id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.callback_query_handler(lambda c: c.data == 'top_up_balance_method_qiwi', state='*')
async def top_up_balance_method_qiwi_inline_handler(call: types.CallbackQuery):
    await TopUpBalance.summa_qiwi.set()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (10 - 25000)',
                           reply_markup=kb_cancel)


@dp.message_handler(lambda m: m.text.isdigit() and 0 < int(m.text) < 25001, state=TopUpBalance.summa_qiwi)
async def top_up_balance_create_bill_qiwi_handler(message: types.Message, state: FSMContext):
    await state.finish()
    bill = await p2p.bill(''.join(random.choices(string.digits + string.ascii_uppercase, k=12)),
                          amount=int(message.text), comment='', lifetime=15)

    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=bill.pay_url))
    kb.add(types.InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üíµ', callback_data=f"check_payment&{bill.bill_id}"))
    text = f"""
‚ôªÔ∏è –û–ø–ª–∞—Ç–∞ QIWI/–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π: <a href="{bill.pay_url}"><b>–û–ü–õ–ê–¢–ê</b></a> 
–°—É–º–º–∞: {message.text}‚ÇΩ
–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.
        """

    await message.answer(text, parse_mode=types.ParseMode.HTML, reply_markup=kb)
    await message.answer('–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.',
                         reply_markup=kb_return_to_main_menu)


@dp.message_handler(lambda m: not m.text.isdigit() or int(m.text) > 25000 or int(m.text) < 10,
                    state=TopUpBalance.summa_qiwi)
async def top_up_balance_create_bill_qiwi_error_handler(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (10 - 25000) –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kb_cancel)


@dp.callback_query_handler(lambda c: c.data.startswith('check_payment'), state='*')
async def check_payment_inline_handler(call: types.CallbackQuery):
    bill_id = call.data.split('&')[1]
    obj = await p2p.check(bill_id=bill_id)
    print(obj.status)
    if obj.status == 'PAID':
        DB.update_user_balance(call.from_user.id, int(float(obj.amount)))

        await bot.edit_message_reply_markup(call.from_user.id, call.message.message_id)
        await bot.send_message(call.from_user.id, f'–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {obj.amount}')
        await bot.send_message(ADMINS[0], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {call.from_user.id} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {obj.amount}RUB')
        user = DB.get_user(call.from_user.id)
        if user[8]:
            percent = int(float(obj.amount)) * REFER_PERCENT // 100
            if percent > 1:
                DB.update_user_balance(user[8], percent)
                await bot.send_message(user[8], f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {percent} RUB –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ü§ù")
    elif obj.status == 'WAITING':
        await call.answer('–°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω.', show_alert=True)
