from config import *
from aiogram import types
from states import *
from aiogram.dispatcher import FSMContext
from main_keyboards import *


@dp.callback_query_handler(lambda c: c.data == 'view_filters', state='*')
async def view_filters_inline_handler(call: types.CallbackQuery):
    user = DB.get_user(call.from_user.id)
    text = f"""
‚öôÔ∏è<b>–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:</b>:

üíé<b>–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã</b>: {user[4]}
üöö<b>–§–∏–ª—å—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫</b>: {user[5]}
üïë<b>–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–æ –¥–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>: {user[3]}
‚è≥<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å—è–≤—ã (–º–∏–Ω—É—Ç—ã)</b>: {user[6]}  
"""
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton('–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã', callback_data='change_filter_price'))
    kb.add(types.InlineKeyboardButton('–§–∏–ª—å—Ç—Ä –¥–æ—Å—Ç–∞–≤–æ–∫', callback_data='change_filter_success_delivery'))
    kb.add(types.InlineKeyboardButton('–§–∏–ª—å—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π', callback_data='change_filter_amount_days'))
    kb.add(types.InlineKeyboardButton('–§–∏–ª—å—Ç—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è', callback_data='change_filter_interval_create'))
    kb.add(types.InlineKeyboardButton('–ê–≤—Ç–æ—Ç–µ–∫—Å—Ç WA', callback_data='change_auto_text_wa'))
    kb.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_main_menu'))
    await bot.send_message(call.from_user.id, text, reply_markup=kb, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(lambda c: c.data == 'change_auto_text_wa', state='*')
async def change_auto_text_wa_inline_handler(call: types.CallbackQuery):
    user = DB.get_user(call.from_user.id)
    await Filters.auto_text_wa.set()
    text = f"""
–¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç:
{user[7]}

–ê–≤—Ç–æ—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –ø—Ä–∏ –æ–±–∑–æ—Ä–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
–ê–≤—Ç–æ—Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –∞ –∏–º–µ–Ω–Ω–æ [link], [title], [name] –∏ [price]
–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è link –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, title - –Ω–∞–∑–≤–∞–Ω–∏–µ, name - –Ω–∏–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞, price - —Ü–µ–Ω—É
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ—Ç–µ–∫—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ ! (–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫)    
"""
    await bot.send_message(call.from_user.id, text, reply_markup=kb_cancel)


@dp.message_handler(state=Filters.auto_text_wa)
async def auto_text_wa_handler(message: types.Message, state: FSMContext):
    await state.finish()
    DB.set_filter_auto_text_wa(message.from_user.id, message.text)
    await message.answer('–ê–≤—Ç–æ—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.', reply_markup=kb_return_to_main_menu)


@dp.callback_query_handler(lambda c: c.data == 'change_filter_interval_create', state='*')
async def change_filter_interval_create_inline_handler(call: types.CallbackQuery):
    await Filters.interval_create.set()
    await bot.send_message(call.from_user.id,
                           '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (15+)',
                           reply_markup=kb_cancel)


@dp.message_handler(lambda m: m.text.isdigit() and int(m.text) > 15, state=Filters.interval_create)
async def filter_interval_create_handler(message: types.Message, state: FSMContext):
    await state.finish()
    DB.set_filter_interval_create(message.from_user.id, message.text)
    await message.answer('–§–∏–ª—å—Ç—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=kb_return_to_main_menu)


@dp.message_handler(lambda m: not m.text.isdigit() or int(m.text) <= 15, state=Filters.interval_create)
async def filter_interval_create_announce_error_handler(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 15) –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kb_cancel)


@dp.callback_query_handler(lambda c: c.data == 'change_filter_amount_days')
async def change_filter_amount_days_inline_handler(call: types.CallbackQuery):
    await Filters.amount_days.set()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–æ –¥–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞',
                           reply_markup=kb_cancel)


@dp.message_handler(lambda m: m.text.isdigit() and int(m.text) > 40, state=Filters.amount_days)
async def filter_amount_days_handler(message: types.Message, state: FSMContext):
    await state.finish()
    DB.set_filter_amount_days(message.from_user.id, int(message.text))
    await message.answer('–§–∏–ª—å—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Å–æ –¥–Ω—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
                         reply_markup=kb_return_to_main_menu)


@dp.message_handler(lambda m: not m.text.isdigit() or int(m.text) <= 40, state=Filters.amount_days)
async def filter_amount_days_error_handler(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (40+ –¥–Ω–µ–π) –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", reply_markup=kb_cancel)


@dp.callback_query_handler(lambda c: c.data == 'change_filter_success_delivery', state='*')
async def change_filter_success_delivery_inline_handler(call: types.CallbackQuery):
    await Filters.success_delivery.set()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞',
                           reply_markup=kb_cancel)


@dp.message_handler(lambda m: m.text.isdigit() and int(m.text) > -1, state=Filters.success_delivery)
async def filter_success_delivery_handler(message: types.Message, state: FSMContext):
    await state.finish()
    DB.set_filter_success_deliveries(message.from_user.id, int(message.text))
    await message.answer('–§–∏–ª—å—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=kb_return_to_main_menu)


@dp.message_handler(lambda m: not m.text.isdigit() or int(m.text) <= -1, state=Filters.success_delivery)
async def filter_success_delivery_error_handler(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kb_cancel)


@dp.callback_query_handler(lambda c: c.data == 'change_filter_price', state='*')
async def change_filter_price_inline_handler(call: types.CallbackQuery):
    await Filters.price.set()
    await bot.send_message(call.from_user.id, f"–í–≤–µ–¥–∏ –≥—Ä–∞–Ω–∏—Ü—ã —Ü–µ–Ω —á–µ—Ä–µ–∑ —á–µ—Ä—Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫:\n<code>50-4800</code>",
                           parse_mode=types.ParseMode.HTML, reply_markup=kb_cancel)


@dp.message_handler(lambda m: '-' in m.text and all(map(str.isdigit, m.text.split('-'))), state=Filters.price)
async def filter_change_price_handler(message: types.Message, state: FSMContext):
    if len(message.text.split('-')) == 2:
        await state.finish()
        DB.set_filter_price(message.from_user.id, message.text)
        await message.answer('–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=kb_return_to_main_menu)
    else:
        await filter_change_price_error_handler(message)


@dp.message_handler(lambda m: '-' not in m.text or not all(map(str.isdigit, m.text.split('-'))), state=Filters.price)
async def filter_change_price_error_handler(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é', reply_markup=kb_cancel)
